"""
A web app built with Streamlit and a pre-trained machine learning model to forecast real estate prices. The app has a user-friendly interface wherein information about a property may be entered and the estimated home value will be displayed. 

First, it imports libraries like Streamlit, Pandas, NumPy, Pickle, and Matplotlib, which can be used for everything from building web apps to analysing data.

Second, the script loads the machine learning model and scaler, a pre-trained Random Forest model and a Box-Cox scaler, respectively, to perform the tasks of prediction and input data preprocessing.

Thirdly, using personalized CSS to enhance the Streamlit user interface for maximum visual appeal and usability. This provides styles for huge fonts and a themed button for forecasts.

The fourth method is the user input function, which uses a sidebar interface to gather information from the user about the property (such as the kind, number of bathrooms, acorn type, and tenancy).

In the fifth process, using one-hot encoding for categorical variables and scaling, the user inputs are transformed into a format appropriate for the prediction model.

Upon user input, the app displays a primary header and the anticipated house price generated by the trained model.

This application is an example of applying machine learning in a real-world setting because it provides customers with instantaneous property price projections.

"""

# Importing all the libraries for making an app
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt

# Load the trained model and scaler
model = pickle.load(open('/Users/zeeshan 1/Downloads/random_forest_model_transform.pkl', 'rb'))
scaler = pickle.load(open('/Users/zeeshan 1/Downloads/box_cox.pkl', 'rb'))
trained_columns = pickle.load(open('/Users/zeeshan 1/Downloads/X_columns.pkl', 'rb'))

# Custom CSS to inject into the streamlit interface
st.markdown(
    """
    <style>
    .big-font {
        font-size:30px !important;
        font-weight: bold;
    }
    .input-font {
        font-size:20px !important;
    }
    .stButton>button {
        color: white;
        background-color: #FF4B4B;
        padding: 10px 24px;
        border-radius: 5px;
        border: none;
        font-size: 20px;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Function to collect user input from the sidebar for the prediction
def get_user_input():
    with st.sidebar:
        st.markdown("## Enter Property Details")
        # Dropdown to select property type
        property_type = st.selectbox("Property Type", ["Detached", "Flat", "Semi-detached", "Terraced"])
        # Input boxes for numerical features
        num_baths = st.number_input("Number of bathrooms", value=1)
        acorn_type = st.number_input("Acorn type (numerical value)", value=42.0)
        num_recepts = st.number_input("Number of receptions", value=1)
        num_beds = st.number_input("Number of bedrooms", value=1)
        # Dropdown to select listing condition and tenure
        listing_condition = st.selectbox("Listing Condition", ["New home", "Previously owned"])
        tenure = st.selectbox("Tenure", ["Freehold", "Leasehold"])
    
    # Creating a dictionary of the user input data
    data = {
        'property_type': property_type,
        'num_baths': num_baths,
        'acorn_type': acorn_type,
        'num_recepts': num_recepts,
        'num_beds': num_beds,
        'listing_condition': listing_condition,
        'tenure': 0 if tenure == "Freehold" else 1
    }
    # Convert the dictionary to a pandas DataFrame
    df_user = pd.DataFrame([data])
    # One-hot encode categorical variables
    df_encoded = pd.get_dummies(df_user, columns=['property_type', 'listing_condition'], drop_first=True)

    # Ensure that the encoded DataFrame has the same columns as the trained model, fill missing with zeros
    for col in trained_columns:
        if col not in df_encoded.columns:
            df_encoded[col] = 0
    df_encoded = df_encoded[trained_columns]

    # Normalize/Scale the user input data
    user_input_scaled = scaler.transform(df_encoded)
    return user_input_scaled

# Main header for the app
st.markdown('<h1 class="big-font">House Price Prediction App</h1>', unsafe_allow_html=True)

# Get user input from the sidebar
user_input = get_user_input()


# Button to trigger the prediction
if st.button("Predict"):
    # Make a prediction based on user input
    prediction = model.predict(user_input)
    # Displaying the Predicted Price
    st.markdown(f'<h2 class="big-font">Predicted Price: Â£{prediction[0]:,.2f}</h2>', unsafe_allow_html=True)
